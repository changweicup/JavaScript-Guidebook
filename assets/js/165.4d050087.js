(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{569:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),s("p",[t._v("在了解闭包之前，先要熟悉以下几点：")]),t._v(" "),s("ol",[s("li",[t._v("首先要理解执行环境（"),s("router-link",{attrs:{to:"/core-modules/executable-code-and-execution-contexts/execution/execution-context-stack.html"}},[t._v("执行上下文栈")]),t._v("），执行环境定义了变量或函数有权访问的其他数据。")],1),t._v(" "),s("li",[t._v("每个执行环境都有一个与之关联的 "),s("router-link",{attrs:{to:"/core-modules/executable-code-and-execution-contexts/execution/variable-object.html"}},[t._v("变量对象")]),t._v("，环境中定义的所有变量和函数都保存在这个对象中。")],1),t._v(" "),s("li",[t._v("每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入到一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。")]),t._v(" "),s("li",[t._v("当某个函数被调用时，会创建一个执行环境及其相应的 "),s("strong",[t._v("作用域链")]),t._v("。然后使用 "),s("code",[t._v("arguments")]),t._v(" 和其他命名参数的值来初始化函数的活动对象。在函数中，活动对象作为变量对象使用（"),s("em",[t._v("作用域链是由每层的变量对象链起来的")]),t._v("）。")]),t._v(" "),s("li",[t._v("在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，直到作用域链终点即全局执行环境。")]),t._v(" "),s("li",[s("strong",[t._v("作用域链的本质是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。")])])]),t._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("p",[t._v("MDN 对闭包的定义为：")]),t._v(" "),s("blockquote",[s("p",[t._v("闭包是指那些能够访问自由变量的函数。")])]),t._v(" "),s("p",[t._v("那什么是自由变量呢？")]),t._v(" "),s("blockquote",[s("p",[t._v("自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。")])]),t._v(" "),s("p",[t._v("由此，我们可以看出闭包共有两部分组成：")]),t._v(" "),s("blockquote",[s("p",[t._v("闭包 = 函数 + 函数能够访问的自由变量")])]),t._v(" "),s("p",[t._v("🌰 "),s("strong",[t._v("标准示例：")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("foo")]),t._v(" 函数可以访问变量 "),s("code",[t._v("a")]),t._v("，但是 "),s("code",[t._v("a")]),t._v(" 既不是 "),s("code",[t._v("foo")]),t._v(" 函数的局部变量，也不是 "),s("code",[t._v("foo")]),t._v(" 函数的参数，所以 "),s("code",[t._v("a")]),t._v(" 就是自由变量。")]),t._v(" "),s("p",[t._v("那么，函数 "),s("code",[t._v("foo")]),t._v(" 和函数访问的自由变量 "),s("code",[t._v("a")]),t._v(" 就构成闭包。但是这只是"),s("strong",[t._v("理论上")]),t._v("的闭包。")]),t._v(" "),s("p",[t._v("🎉 在 ECMAScript 中，闭包指的是：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。")])]),t._v(" "),s("li",[s("p",[t._v("从实践角度：以下函数才算是闭包")]),t._v(" "),s("ul",[s("li",[t._v("即使创建它的执行上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),t._v(" "),s("li",[t._v("在代码中引用了自由变量")])])])]),t._v(" "),s("h2",{attrs:{id:"分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),s("p",[t._v("我们通过一段代码仔细分析执行过程到底发生了什么：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" baz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("baz")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",[s("li",[t._v("代码执行流进入全局执行环境，并对全局执行环境中的代码进行声明提升。")]),t._v(" "),s("li",[t._v("执行流执行 "),s("code",[t._v("var baz = foo()")]),t._v(" ，调用 "),s("code",[t._v("foo()")]),t._v(" 函数，此时执行流进入 "),s("code",[t._v("foo()")]),t._v(" 执行环境中，对该执行环境中的代码进行声明提升过程。此时执行环境栈中存在两个执行环境，"),s("code",[t._v("foo()")]),t._v(" 函数为当前执行流所在执行环境。")]),t._v(" "),s("li",[t._v("执行流执行代码 "),s("code",[t._v("var a = 2;")]),t._v("，对 "),s("code",[t._v("a")]),t._v(" 进行 LHS 查询，给 "),s("code",[t._v("a")]),t._v(" 赋值 2。")]),t._v(" "),s("li",[t._v("执行流执行 "),s("code",[t._v("return bar")]),t._v(" ，将 "),s("code",[t._v("bar()")]),t._v(" 函数作为返回值返回。按理说，这时 "),s("code",[t._v("foo()")]),t._v(" 函数已经执行完毕，应该销毁其执行环境，等待垃圾回收。但因为其返回值是 "),s("code",[t._v("bar")]),t._v(" 函数。"),s("code",[t._v("bar")]),t._v(" 函数中存在自由变量 "),s("code",[t._v("a")]),t._v("，需要通过作用域链到 "),s("code",[t._v("foo()")]),t._v(" 函数的执行环境中找到变量 "),s("code",[t._v("a")]),t._v(" 的值，所以虽然 "),s("code",[t._v("foo")]),t._v(" 函数的执行环境被销毁，但其变量对象不能被销毁，"),s("strong",[t._v("只是从活动状态变成非活动状态")]),t._v("；而全局环境的变量对象则变成活动状态；执行流继续执行 "),s("code",[t._v("var baz = foo()")]),t._v("，把 "),s("code",[t._v("foo()")]),t._v(" 函数的返回值 "),s("code",[t._v("bar")]),t._v(" 函数赋值给 "),s("code",[t._v("baz")]),t._v("。")]),t._v(" "),s("li",[t._v("执行流执行 "),s("code",[t._v("baz()")]),t._v(" ，通过在全局执行环境中查找 "),s("code",[t._v("baz")]),t._v(" 的值，"),s("code",[t._v("baz")]),t._v(" 保存着 "),s("code",[t._v("foo()")]),t._v(" 函数的返回值 "),s("code",[t._v("bar")]),t._v("。所以这时执行 "),s("code",[t._v("baz()")]),t._v(" ，会调用 "),s("code",[t._v("bar()")]),t._v(" 函数，此时执行流进入 "),s("code",[t._v("bar()")]),t._v(" 函数执行环境中，对该执行环境中的代码进行声明提升过程。此时执行环境栈中存在三个执行环境，"),s("code",[t._v("bar()")]),t._v(" 函数为当前执行流所在的执行环境。")]),t._v(" "),s("li",[t._v("在声明提升的过程中，由于 "),s("code",[t._v("a")]),t._v(" 是个自由变量，需要通过 "),s("code",[t._v("bar()")]),t._v(" 函数的作用域链 "),s("code",[t._v("bar() -> foo() -> 全局作用域")]),t._v(" 进行查找，最终在 "),s("code",[t._v("foo()")]),t._v(" 函数中找到 "),s("code",[t._v("var a = 2;")]),t._v(" ，然后在 "),s("code",[t._v("foo()")]),t._v(" 函数的执行环境中找到 "),s("code",[t._v("a")]),t._v(" 的值是 2，所以给 "),s("code",[t._v("a")]),t._v(" 赋值 2。")]),t._v(" "),s("li",[t._v("执行流执行 "),s("code",[t._v("console.log(a)")]),t._v(" ，调用内部对象 "),s("code",[t._v("console")]),t._v("，并从 "),s("code",[t._v("console")]),t._v(" 对象中找到 "),s("code",[t._v("log")]),t._v(" 方法，将 "),s("code",[t._v("a")]),t._v(" 作为参数传递进去。从 "),s("code",[t._v("bar()")]),t._v(" 函数的执行环境中找到 "),s("code",[t._v("a")]),t._v(" 的值是 2，所以，最终在控制台显示 2。")]),t._v(" "),s("li",[t._v("执行流执行完 "),s("code",[t._v("bar()")]),t._v(" 函数后，"),s("code",[t._v("bar()")]),t._v(" 的执行环境被弹出执行环境栈，并被销毁，等待垃圾回收，控制权还给全局执行环境。")]),t._v(" "),s("li",[t._v("当页面关闭时，所有执行环境都被销毁。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行上下文栈")]),t._v("\nECStack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    globalContext\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局执行上下文")]),t._v("\nglobal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("global"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("globalContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" globalContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数foo被创建，保存作用域链到函数内部属性[[Scopes]]")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Scopes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    globalContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// foo函数执行上下文")]),t._v("\nfooContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" globalContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bar 函数执行上下文")]),t._v("\nbarContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" globalContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当 "),s("code",[t._v("bar")]),t._v(" 函数执行的时候，"),s("code",[t._v("foo")]),t._v(" 函数上下文已经被销毁了啊（即从执行上下文栈中被弹出），怎么还会读取到 "),s("code",[t._v("foo")]),t._v(" 作用域下的 "),s("code",[t._v("a")]),t._v(" 值呢？")]),t._v(" "),s("p",[t._v("当我们了解了具体的执行过程后，我们知道 "),s("code",[t._v("bar")]),t._v(" 函数执行上下文维护了一个作用域链：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("barContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fooContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" globalContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对的，就是因为这个作用域链，"),s("code",[t._v("bar")]),t._v(" 函数依然可以读取到 "),s("code",[t._v("fooContext.AO")]),t._v(" 的值，说明当 "),s("code",[t._v("bar")]),t._v(" 函数引用了 "),s("code",[t._v("fooContext.AO")]),t._v(" 中的值的时候，即使 "),s("code",[t._v("fooContext")]),t._v(" 被销毁了，但是 JavaScript 依然会让 "),s("code",[t._v("fooContext.AO")]),t._v(" 活在内存中，"),s("code",[t._v("bar")]),t._v(" 函数依然可以通过 "),s("code",[t._v("bar")]),t._v(" 函数的作用域链找到它，正是因为 JavaScript 做到了这一点，从而实现了闭包这个概念。")]),t._v(" "),s("h2",{attrs:{id:"常见形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见形式","aria-hidden":"true"}},[t._v("#")]),t._v(" 常见形式")]),t._v(" "),s("p",[t._v("常见闭包：")]),t._v(" "),s("ul",[s("li",[t._v("函数嵌套：函数里面的函数能够保证外面的函数的作用域不会被销毁，所以无论是在函数里面还是在外面调用函数里面的函数都可以访问到外层函数的作用域，具体做法可以将里面函数当做返回值返回后通过两次的括号调用")]),t._v(" "),s("li",[t._v("回调函数：回调函数会保留当前外层的作用域，然后回调到另一个地方执行，执行的时候就是闭包")]),t._v(" "),s("li",[t._v("匿名函数自执行：严格算也不是闭包，就是 "),s("code",[t._v("(function(){})()")]),t._v(" 这种格式")])]),t._v(" "),s("h2",{attrs:{id:"优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优缺点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),s("p",[t._v("闭包的优点能够让希望一个变量长期驻扎在内存之中成为可能，避免全局变量的污染，以及允许私有成员的存在。")]),t._v(" "),s("p",[t._v("闭包的缺点就是常驻内存会增大内存使用量，并且使用不当容易造成内存泄漏。")]),t._v(" "),s("p",[t._v("如果不是因为某些特殊任务而需要闭包，在没有必要的情况下，在其他函数中创建函数是不明智的，因为闭包对脚本性能具有负面影响，包括处理速度和内存消耗。")])])},[],!1,null,null,null);a.default=e.exports}}]);
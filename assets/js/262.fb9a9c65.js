(window.webpackJsonp=window.webpackJsonp||[]).push([[262],{624:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator","aria-hidden":"true"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),a("p",[t._v("Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。")]),t._v(" "),a("blockquote",[a("p",[t._v("本篇着重介绍 语法及 API，异步编程应用参考 "),a("router-link",{attrs:{to:"/standard-built-in-objects/control-abstraction-objects/generator-objects/generator-async.html"}},[t._v("Generator 函数的异步应用")])],1)]),t._v(" "),a("h2",{attrs:{id:"状态机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态机","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态机")]),t._v(" "),a("p",[t._v("Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。")]),t._v(" "),a("p",[t._v("执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个 "),a("router-link",{attrs:{to:"/standard-built-in-objects/control-abstraction-objects/iterator-objects/iterator.html"}},[t._v("遍历器对象")]),t._v(" 生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。")],1),t._v(" "),a("h3",{attrs:{id:"函数特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数特征","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数特征")]),t._v(" "),a("p",[t._v("形式上，Generator 函数是一个普通函数，但是有两个特征")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("function")]),t._v(" 关键字与函数名之间有一个星号（"),a("code",[t._v("*")]),t._v("）")]),t._v(" "),a("li",[t._v("函数体内部使用 "),a("code",[t._v("yield")]),t._v("（中文 "),a("code",[t._v("生产/产出")]),t._v(" 的意思）表单式，定义不同的内部状态")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helloWorldGenerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'World'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ending'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("helloWorldGenerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("代码定义了一个 Generator 函数 "),a("code",[t._v("helloWorldGenerator")]),t._v("，它内部有两个"),a("code",[t._v("yield")]),t._v("表达式（"),a("code",[t._v("hello")]),t._v(" 和 "),a("code",[t._v("world")]),t._v("），即该函数有三个状态："),a("code",[t._v("hello")]),t._v("、"),a("code",[t._v("world")]),t._v(" 和 "),a("code",[t._v("return")]),t._v(" 语句（结束执行）。")]),t._v(" "),a("h3",{attrs:{id:"调用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 调用方法")]),t._v(" "),a("p",[t._v("Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并"),a("strong",[t._v("不执行")]),t._v("，返回的也不是函数运行结果，而是一个"),a("strong",[t._v("指向内部状态的指针对象")]),t._v("，也就是 "),a("router-link",{attrs:{to:"/standard-built-in-objects/control-abstraction-objects/iterator-objects/iterator.html"}},[t._v("遍历器对象")]),t._v("（Iterator Object）。")],1),t._v(" "),a("p",[t._v("下一步，必须调用遍历器对象的 "),a("code",[t._v("next")]),t._v(" 方法，使得指针移向下一个状态。也就是说，每次调用 "),a("code",[t._v("next")]),t._v(" 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 "),a("code",[t._v("yield")]),t._v(" 表达式（或 "),a("code",[t._v("return")]),t._v(" 语句）为止。换言之，Generator 函数是分段执行的，"),a("code",[t._v("yield")]),t._v(" 表达式是暂停执行的标记，而 "),a("code",[t._v("next")]),t._v(" 方法可以恢复执行。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("hw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 'Hello', done: false }")]),t._v("\n\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 'World', done: false }")]),t._v("\n\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: 'Ending', done: true }")]),t._v("\n\nhw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { value: undefined, done: true }")]),t._v("\n")])])]),a("p",[t._v("上面代码一共调用了四次"),a("code",[t._v("next")]),t._v("方法。")]),t._v(" "),a("p",[t._v("第一次调用，Generator 函数开始执行，直到遇到第一个 "),a("code",[t._v("yield")]),t._v(" 表达式为止。"),a("code",[t._v("next")]),t._v(" 方法返回一个对象，它的"),a("code",[t._v("value")]),t._v(" 属性就是当前 "),a("code",[t._v("yield")]),t._v(" 表达式的值 "),a("code",[t._v("Hello")]),t._v("，"),a("code",[t._v("done")]),t._v(" 属性的值 "),a("code",[t._v("false")]),t._v("，表示遍历还没有结束。")]),t._v(" "),a("p",[t._v("第二次调用，Generator 函数从上次 "),a("code",[t._v("yield")]),t._v(" 表达式停下的地方，一直执行到下一个 "),a("code",[t._v("yield")]),t._v(" 表达式。"),a("code",[t._v("next")]),t._v(" 方法返回的对象的 "),a("code",[t._v("value")]),t._v(" 属性就是当前 "),a("code",[t._v("yield")]),t._v(" 表达式的值 "),a("code",[t._v("World")]),t._v("，"),a("code",[t._v("done")]),t._v(" 属性的值 "),a("code",[t._v("false")]),t._v("，表示遍历还没有结束。")]),t._v(" "),a("p",[t._v("第三次调用，Generator 函数从上次 "),a("code",[t._v("yield")]),t._v(" 表达式停下的地方，一直执行到 "),a("code",[t._v("return")]),t._v(" 语句（如果没有 "),a("code",[t._v("return")]),t._v(" 语句，就执行到函数结束）。"),a("code",[t._v("next")]),t._v(" 方法返回的对象的 "),a("code",[t._v("value")]),t._v(" 属性，就是紧跟在 "),a("code",[t._v("return")]),t._v(" 语句后面的表达式的值（如果没有 "),a("code",[t._v("return")]),t._v(" 语句，则 "),a("code",[t._v("value")]),t._v(" 属性的值为 "),a("code",[t._v("undefined")]),t._v("），"),a("code",[t._v("done")]),t._v(" 属性的值 "),a("code",[t._v("true")]),t._v("，表示遍历已经结束。")]),t._v(" "),a("p",[t._v("第四次调用，此时 Generator 函数已经运行完毕，"),a("code",[t._v("next")]),t._v(" 方法返回对象的 "),a("code",[t._v("value")]),t._v(" 属性为 "),a("code",[t._v("undefined")]),t._v("，"),a("code",[t._v("done")]),t._v(" 属性为 "),a("code",[t._v("true")]),t._v("。以后再调用 "),a("code",[t._v("next")]),t._v(" 方法，返回的都是这个值。")]),t._v(" "),a("p",[t._v("总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的 "),a("code",[t._v("next")]),t._v(" 方法，就会返回一个有着 "),a("code",[t._v("value")]),t._v(" 和 "),a("code",[t._v("done")]),t._v(" 两个属性的对象。"),a("code",[t._v("value")]),t._v("属性表示当前的内部状态的值，是 "),a("code",[t._v("yield")]),t._v(" 表达式后面那个表达式的值；"),a("code",[t._v("done")]),t._v(" 属性是一个布尔值，表示是否遍历结束。")]),t._v(" "),a("h2",{attrs:{id:"yield-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield-表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" yield 表达式")]),t._v(" "),a("p",[t._v("由于 Generator 函数返回的遍历器对象，只有调用 "),a("code",[t._v("next")]),t._v(" 方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。"),a("code",[t._v("yield")]),t._v(" 表达式就是暂停标志。")]),t._v(" "),a("p",[t._v("遍历器对象的 "),a("code",[t._v("next")]),t._v(" 方法的运行逻辑如下。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("遇到 "),a("code",[t._v("yield")]),t._v(" 表达式，就暂停执行后面的操作，并将紧跟在 "),a("code",[t._v("yield")]),t._v(" 后面的那个表达式的值，作为返回的对象的 "),a("code",[t._v("value")]),t._v(" 属性值。")])]),t._v(" "),a("li",[a("p",[t._v("下一次调用 "),a("code",[t._v("next")]),t._v(" 方法时，再继续往下执行，直到遇到下一个 "),a("code",[t._v("yield")]),t._v(" 表达式。")])]),t._v(" "),a("li",[a("p",[t._v("如果没有再遇到新的 "),a("code",[t._v("yield")]),t._v(" 表达式，就一直运行到函数结束，直到 "),a("code",[t._v("return")]),t._v(" 语句为止，并将 "),a("code",[t._v("return")]),t._v(" 语句后面的表达式的值，作为返回的对象的 "),a("code",[t._v("value")]),t._v(" 属性值。")])]),t._v(" "),a("li",[a("p",[t._v("如果该函数没有 "),a("code",[t._v("return")]),t._v(" 语句，则返回的对象的 "),a("code",[t._v("value")]),t._v(" 属性值为 "),a("code",[t._v("undefined")]),t._v("。")])])]),t._v(" "),a("p",[t._v("需要注意的是，"),a("code",[t._v("yield")]),t._v(" 表达式后面的表达式，只有当调用 "),a("code",[t._v("next")]),t._v(" 方法、内部指针指向该语句时才会执行，因此等于为 JavaScript 提供了手动的“"),a("strong",[t._v("惰性求值")]),t._v("”（Lazy Evaluation）的语法功能。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码中，"),a("code",[t._v("yield")]),t._v(" 后面的表达式 "),a("code",[t._v("123 + 456")]),t._v("，不会立即求值，只会在"),a("code",[t._v("next")]),t._v("方法将指针移到这一句时，才会求值。")]),t._v(" "),a("h3",{attrs:{id:"yield-与-return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield-与-return","aria-hidden":"true"}},[t._v("#")]),t._v(" yield 与 return")]),t._v(" "),a("p",[a("code",[t._v("yield")]),t._v(" 表达式与 "),a("code",[t._v("return")]),t._v(" 语句既有相似之处，也有区别。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("相似")]),t._v(" "),a("ul",[a("li",[t._v("两种语句表达式都能返回紧跟在语句后面的那个表达式的值。")])])]),t._v(" "),a("li",[a("p",[t._v("区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("记忆功能")]),t._v("：每次遇到 "),a("code",[t._v("yield")]),t._v("，函数暂停执行，下一次再从该位置继续向后执行，而 "),a("code",[t._v("return")]),t._v(" 语句不具备位置记忆的功能。")]),t._v(" "),a("li",[a("strong",[t._v("执行次数")]),t._v("：一个函数里面，只能执行一次（或者说一个）"),a("code",[t._v("return")]),t._v(" 语句，但是可以执行多次（或者说多个）"),a("code",[t._v("yield")]),t._v(" 表达式。")]),t._v(" "),a("li",[a("strong",[t._v("返回次数")]),t._v("：正常函数只能返回一个值，因为只能执行一次 "),a("code",[t._v("return")]),t._v(" ；Generator 函数可以返回一系列的值，因为可以有任意多个"),a("code",[t._v("yield")]),t._v("。从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历。")])])])]),t._v(" "),a("h3",{attrs:{id:"暂缓执行函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂缓执行函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 暂缓执行函数")]),t._v(" "),a("p",[t._v("Generator 函数可以不用 "),a("code",[t._v("yield")]),t._v(" 表达式，这时就变成了一个单纯的"),a("strong",[t._v("暂缓执行函数")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'执行了！'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" generator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  generator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上面代码中，函数 "),a("code",[t._v("fn")]),t._v(" 如果是普通函数，在为变量 "),a("code",[t._v("generator")]),t._v(" 赋值时就会执行。但是，函数 "),a("code",[t._v("fn")]),t._v(" 是一个 Generator 函数，就变成只有调用 "),a("code",[t._v("next")]),t._v(" 方法时，函数 "),a("code",[t._v("fn")]),t._v(" 才会执行。")]),t._v(" "),a("h3",{attrs:{id:"表达式规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 表达式规范")]),t._v(" "),a("p",[t._v("另外需要注意，"),a("strong",[a("code",[t._v("yield")]),t._v(" 表达式只能用在 Generator 函数里面")]),t._v("，用在其他地方都会报错。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError: Unexpected number")]),t._v("\n")])])]),a("p",[t._v("上面代码在一个普通函数中使用 "),a("code",[t._v("yield")]),t._v(" 表达式，结果产生一个句法错误。")]),t._v(" "),a("h3",{attrs:{id:"嵌套表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 嵌套表达式")]),t._v(" "),a("p",[a("code",[t._v("yield")]),t._v(" 表达式如果用在另一个表达式之中，必须放在"),a("strong",[t._v("圆括号")]),t._v("里面。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SyntaxError")]),t._v("\n\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("yield")]),t._v(" 表达式用作"),a("strong",[t._v("函数参数")]),t._v("或放在"),a("strong",[t._v("赋值表达式")]),t._v("的右边，可以不加括号。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OK")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"原型方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Generator.prototype.next")])]),t._v(" "),a("li",[a("p",[a("router-link",{attrs:{to:"/standard-built-in-objects/control-abstraction-objects/generator-objects/properties-of-the-promise-prototype-object/return.html"}},[t._v("Generator.prototype.return")])],1)]),t._v(" "),a("li",[a("p",[a("router-link",{attrs:{to:"/standard-built-in-objects/control-abstraction-objects/generator-objects/properties-of-the-promise-prototype-object/throw.html"}},[t._v("Generator.prototype.throw")])],1)])]),t._v(" "),a("p",[a("strong",[t._v("原型方法共同点")])]),t._v(" "),a("p",[t._v("三者的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 "),a("code",[t._v("yield")]),t._v(" 表达式。")]),t._v(" "),a("p",[a("code",[t._v("next()")]),t._v(" 是将 "),a("code",[t._v("yield")]),t._v(" 表达式替换成一个值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("generator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" gen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ngen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object {value: 3, done: false}")]),t._v("\n\ngen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object {value: 1, done: true}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于将 let result = yield x + y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换成 let result = 1;")]),t._v("\n")])])]),a("p",[t._v("上面代码中，第二个 "),a("code",[t._v("next(1)")]),t._v(" 方法就相当于将 "),a("code",[t._v("yield")]),t._v(" 表达式替换成一个值 "),a("code",[t._v("1")]),t._v("。如果 "),a("code",[t._v("next")]),t._v(" 方法没有参数，就相当于替换成 "),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("throw()")]),t._v(" 是将 "),a("code",[t._v("yield")]),t._v(" 表达式替换成一个 "),a("code",[t._v("throw")]),t._v(" 语句。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("throw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'出错了'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Uncaught Error: 出错了")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于将 let result = yield x + y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换成 let result = throw(new Error('出错了'));")]),t._v("\n")])])]),a("p",[a("code",[t._v("return()")]),t._v(" 是将 "),a("code",[t._v("yield")]),t._v(" 表达式替换成一个 "),a("code",[t._v("return")]),t._v(" 语句。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object {value: 2, done: true}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于将 let result = yield x + y")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换成 let result = return 2;")]),t._v("\n")])])]),a("h2",{attrs:{id:"作为对象的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为对象的函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 作为对象的函数")]),t._v(" "),a("p",[t._v("如果一个对象的属性是 Generator 函数，可以简写成下面的形式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ···")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上面代码中，"),a("code",[t._v("generator")]),t._v(" 属性前面有一个星号，表示这个属性是一个 Generator 函数。")]),t._v(" "),a("p",[t._v("它的完整形式如下，与上面的写法是等价的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("myGeneratorMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ···")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"判断方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断方法")]),t._v(" "),a("p",[a("strong",[t._v("生成器对象的判断方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isGenerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("throw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("生成器函数的判断方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isGeneratorFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GeratorFunction'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GeneratorFunction'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("displayName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isGenerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("利用函数的 "),a("code",[t._v("constructor")]),t._v(" 构造器的名字来判断，为了兼容性使用 "),a("code",[t._v("name")]),t._v(" 与 "),a("code",[t._v("displayName")]),t._v(" 两个属性来进行判断. 这里递归调用 "),a("code",[t._v("isGenerator")]),t._v(" 判断 "),a("code",[t._v("constructor")]),t._v(" 的原型是因为有自定义迭代器的存在。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("参考书籍：")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/generator",target:"_blank",rel:"noopener noreferrer"}},[t._v("《ECMAScript 6 入门》阮一峰著"),a("OutboundLink")],1)])])])},[],!1,null,null,null);s.default=e.exports}}]);
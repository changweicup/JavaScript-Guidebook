(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{443:function(t,a,e){"use strict";e.r(a);var v=e(2),_=Object(v.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布局","aria-hidden":"true"}},[t._v("#")]),t._v(" 布局")]),t._v(" "),e("p",[t._v("渲染器在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为"),e("strong",[t._v("布局（Layout）")]),t._v(" 或 "),e("strong",[t._v("重排（Reflow）")]),t._v("。")]),t._v(" "),e("p",[t._v("HTML 采用 "),e("strong",[t._v("基于流的布局模型")]),t._v("，这意味着大多数情况下只要一次遍历就能计算出几何信息。处于流中靠后位置元素通常不会影响靠前位置元素的几何特征，因此布局可以按从左至右、从上至下的顺序遍历文档。")]),t._v(" "),e("p",[e("strong",[t._v("坐标系")]),t._v("是相对于根节点而建立的，使用的是上坐标和左坐标。")]),t._v(" "),e("p",[t._v("根渲染器的位置左边是 "),e("code",[t._v("(0,0)")]),t._v("，其尺寸为视口（也就是浏览器窗口的可视区域）。")]),t._v(" "),e("p",[t._v("布局是一个递归的过程。它从根渲染器（对应于 HTML 文档的 "),e("code",[t._v("<html>")]),t._v(" 元素）开始，然后递归遍历部分或所有的渲染器层次结构，每一个渲染器都会通过调用其需要进行布局的子代的 "),e("code",[t._v("layout")]),t._v(" 方法，为每一个需要计算的渲染器计算几何信息。任何有可能改变元素位置或大小的样式都会触发这个 Layout 事件。")]),t._v(" "),e("h2",{attrs:{id:"dirty-位系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dirty-位系统","aria-hidden":"true"}},[t._v("#")]),t._v(" Dirty 位系统")]),t._v(" "),e("p",[t._v("为避免对所有细小更改都进行整体布局，浏览器采用了一种 Dirty 位系统。如果某个渲染器发生了更改，或者将自身及其子代标注为 "),e("code",[t._v("dirty")]),t._v("，则需要进行布局。类似于脏检测。")]),t._v(" "),e("p",[t._v("有 "),e("code",[t._v("dirty")]),t._v(" 和 "),e("code",[t._v("children are dirty")]),t._v(" 两种标记方法。"),e("code",[t._v("children are dirty")]),t._v(" 表示尽管渲染器自身没有变化，但它至少有一个子代需要布局。")]),t._v(" "),e("h2",{attrs:{id:"全局布局和增量布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局布局和增量布局","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局布局和增量布局")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("全局布局")]),t._v("：指触发了整个渲染树范围的布局，渲染器的全局样式更改或者屏幕大小调整都会触发全局布局。\n"),e("ul",[e("li",[t._v("影响所有渲染器的全局样式更改，例如字体大小更改")]),t._v(" "),e("li",[t._v("屏幕大小调整")])])]),t._v(" "),e("li",[e("strong",[t._v("增量布局")]),t._v("：采用增量方式，也就是只对 dirty 渲染器进行布局（这样可能存在需要进行额外布局的弊端）。\n"),e("ul",[e("li",[t._v("当来自网络的额外内容添加到 DOM 树之后，新的渲染器附加到了渲染器中")])])])]),t._v(" "),e("h2",{attrs:{id:"异步布局和同步布局"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步布局和同步布局","aria-hidden":"true"}},[t._v("#")]),t._v(" 异步布局和同步布局")]),t._v(" "),e("p",[t._v("增量布局是异步执行的。")]),t._v(" "),e("p",[t._v("Firefox 将增量布局的 "),e("code",[t._v("reflow")]),t._v(" 命令加入队列，而调度程序会触发这些命令的批量执行。")]),t._v(" "),e("p",[t._v("WebKit 也有用于执行增量布局的计时器：对渲染树进行遍历，并对 dirty 渲染器进行布局。 请求样式信息（例如 "),e("code",[t._v("offsetHeight")]),t._v("）的脚本可同步触发增量布局。 全局布局往往是同步触发的。 有时，当初始布局完成之后，如果一些属性（如滚动位置）发生变化，布局就会作为回调而触发。")]),t._v(" "),e("h2",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("h3",{attrs:{id:"浏览器的自身优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的自身优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器的自身优化")]),t._v(" "),e("p",[t._v("如果布局是由 "),e("strong",[t._v("大小调整")]),t._v(" 或 "),e("strong",[t._v("渲染器的位置（而非大小）")]),t._v(" 改变而触发的，那么可以从缓存中获取渲染器的大小，而无需重新计算。在某些情况下，只有一个子树进行了修改，因此无需从根节点开始布局。这适用于在本地进行更改而不影响周围元素的情况，例如在文本字段中插入文本（否则每次键盘输入都将触发从根节点开始的布局）。")]),t._v(" "),e("p",[t._v("因为这个优化方案，所以你每改一次样式，它就不会回流（Reflow）或重绘（Repaint）一次。但是有些情况，如果我们的程序需要某些特殊的值，那么浏览器需要返回最新的值，而会有一些样式的改变，从而造成频繁的回流和重绘。比如获取下面这些值，浏览器会马上进行回流：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("offsetTop")]),t._v("、"),e("code",[t._v("offsetLeft")]),t._v("、"),e("code",[t._v("offsetWidth")]),t._v("、"),e("code",[t._v("offsetHeight")])]),t._v(" "),e("li",[e("code",[t._v("scrollTop")]),t._v("、"),e("code",[t._v("scrollLeft")]),t._v("、"),e("code",[t._v("scrollWidth")]),t._v("、"),e("code",[t._v("scrollHeight")])]),t._v(" "),e("li",[e("code",[t._v("clientTop")]),t._v("、"),e("code",[t._v("clientLeft")]),t._v("、"),e("code",[t._v("clientWidth")]),t._v("、"),e("code",[t._v("clientHeight")])]),t._v(" "),e("li",[e("code",[t._v("getComputedStyle()")])]),t._v(" "),e("li",[e("code",[t._v("currentStyle")])])]),t._v(" "),e("p",[e("strong",[t._v("减少重绘重排的优化方式：")])]),t._v(" "),e("ul",[e("li",[t._v("减少逐条地修改 DOM 节点的样式，尽可能使用 CSS 类进行批量操作")]),t._v(" "),e("li",[t._v("缓存 DOM 节点，供后面使用")]),t._v(" "),e("li",[t._v("把 DOM 离线后修改，如："),e("code",[t._v("documentFragment")]),t._v("、虚拟 DOM、改为 "),e("code",[t._v("display:none")]),t._v(" 再显示")]),t._v(" "),e("li",[t._v("尽量修改层级比较低的 DOM")]),t._v(" "),e("li",[t._v("有动画的 DOM 使用 "),e("code",[t._v("fixed")]),t._v(" 或 "),e("code",[t._v("absoult")]),t._v(" 的 "),e("code",[t._v("position")]),t._v("，脱离文档流")])]),t._v(" "),e("h3",{attrs:{id:"布局处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布局处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 布局处理")]),t._v(" "),e("p",[t._v("布局通常具有以下模式：")]),t._v(" "),e("ol",[e("li",[t._v("父渲染器确定自己的宽度")]),t._v(" "),e("li",[t._v("父渲染器依次处理子渲染器，并且：\n"),e("ol",[e("li",[t._v("放置子渲染器（设置横纵坐标）")]),t._v(" "),e("li",[t._v("如果有必要，调用子渲染器的布局（如果子渲染器是 "),e("code",[t._v("dirty")]),t._v(" 的，或者这是全局布局，或者出于其他某些原因），这会计算子渲染器的高度")])])]),t._v(" "),e("li",[t._v("父渲染器根据子渲染器的累加高度以及边距和补白的高度来设置自身高度，此值也可供父渲染器的父渲染器使用")]),t._v(" "),e("li",[t._v("将其父 dirty 位设置为 "),e("code",[t._v("false")])])]),t._v(" "),e("h3",{attrs:{id:"宽度计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宽度计算","aria-hidden":"true"}},[t._v("#")]),t._v(" 宽度计算")]),t._v(" "),e("p",[t._v("渲染器宽度是根据容器块的宽度、渲染器样式中的 "),e("code",[t._v("width")]),t._v(" 属性以及边距和边框计算得出的。")]),t._v(" "),e("p",[t._v("例如以下 "),e("code",[t._v("div")]),t._v(" 的宽度：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token style-attr language-css"}},[e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('="')]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 30%")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("将由 Webkit 计算如下（BenderBox 类，"),e("code",[t._v("calcWidth")]),t._v(" 方法）：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("容器的宽度取容器的 "),e("code",[t._v("availableWidth")]),t._v(" 和 0 中的较大值。"),e("code",[t._v("availableWidth")]),t._v(" 在本例中相当于 "),e("code",[t._v("contentWidth")]),t._v("，计算公式如下：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clientWidth")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("paddingLeft")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("paddingRight")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("code",[t._v("clientWidth")]),t._v(" 和 "),e("code",[t._v("clientHeight")]),t._v(" 表示一个对象的内部（除去边框和滚动条）。")])]),t._v(" "),e("li",[e("p",[t._v("元素的宽度是 "),e("code",[t._v("width")]),t._v(" 样式属性。它会根据容器宽度的百分比计算得出一个绝对值。")])]),t._v(" "),e("li",[e("p",[t._v("然后加上水平方向的边框和补白。")])])]),t._v(" "),e("h2",{attrs:{id:"换行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#换行","aria-hidden":"true"}},[t._v("#")]),t._v(" 换行")]),t._v(" "),e("p",[t._v("如果渲染器在布局过程中需要换行，会立即暂停布局，并告知其父代需要换行。父代会创建额外的渲染器，并对其调用布局。")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("参考资料：")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.im/post/5b0a6f1af265da0ddb63ecd9#heading-16",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 浏览器原理"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Introduction",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 浏览器的工作原理：新式网络浏览器幕后揭秘"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/wjlog/p/5744753.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("📝 前端必读：浏览器内部工作原理"),e("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=_.exports}}]);
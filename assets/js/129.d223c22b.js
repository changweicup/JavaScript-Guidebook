(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{508:function(r,e,t){"use strict";t.r(e);var a=t(2),n=Object(a.a)({},function(){var r=this,e=r.$createElement,t=r._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"csrf-攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击","aria-hidden":"true"}},[r._v("#")]),r._v(" CSRF 攻击")]),r._v(" "),t("p",[r._v("跨站点请求伪造（Cross-site request forgery，CSRF）是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。")]),r._v(" "),t("p",[r._v("与 "),t("router-link",{attrs:{to:"/computer-networks/frontend-security/xss.html"}},[r._v("XSS")]),r._v(" 相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。")],1),r._v(" "),t("h2",{attrs:{id:"攻击方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#攻击方式","aria-hidden":"true"}},[r._v("#")]),r._v(" 攻击方式")]),r._v(" "),t("p",[r._v("CSRF 漏洞即利用网站权限校验漏洞在用户不知觉情况下发送请求，达到「"),t("strong",[r._v("伪装")]),r._v("」用户的目的。")]),r._v(" "),t("p",[r._v("攻击者利用 CSRF 实现的攻击主要方式：")]),r._v(" "),t("ul",[t("li",[r._v("攻击者能够欺骗受害用户完成该受害者所允许的任一状态改变的操作\n"),t("ul",[t("li",[r._v("如：更新账号细节、完成购物、注销甚至登陆等操作")])])]),r._v(" "),t("li",[r._v("获取用户的隐私数据")]),r._v(" "),t("li",[r._v("配合其他漏洞攻击")]),r._v(" "),t("li",[r._v("CSRF 蠕虫")])]),r._v(" "),t("h2",{attrs:{id:"攻击特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#攻击特点","aria-hidden":"true"}},[r._v("#")]),r._v(" 攻击特点")]),r._v(" "),t("ul",[t("li",[r._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生")]),r._v(" "),t("li",[r._v("攻击利用受害者被攻击网站的登录凭证，冒充受害者提交操作，=而不是直接窃取数据")]),r._v(" "),t("li",[r._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是「冒用」")])]),r._v(" "),t("p",[r._v("CSRF 攻击时黑客借助受害者的 Cookie 骗取服务器的信任，但是黑客并不能拿到 Cookie，也看不到 Cookie 的内容。")]),r._v(" "),t("p",[r._v("另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。比如银行系统中转账的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询金额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。")]),r._v(" "),t("h2",{attrs:{id:"防御策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防御策略","aria-hidden":"true"}},[r._v("#")]),r._v(" 防御策略")]),r._v(" "),t("p",[r._v("CSRF 通常从第三方网站发起，被攻击网站无法防止攻击发生，只能通过增强自己网站针对 CSRF 的防护能力来提升安全性。")]),r._v(" "),t("p",[r._v("针对 CSRF 的特点制定防护策略：")]),r._v(" "),t("ul",[t("li",[r._v("阻止不明外域访问\n"),t("ul",[t("li",[r._v("同源检测机制\n"),t("ul",[t("li",[r._v("Origin")]),r._v(" "),t("li",[r._v("Referrer")])])])])]),r._v(" "),t("li",[r._v("提交时要求附加本域才能获取的信息\n"),t("ul",[t("li",[r._v("额外验证机制")])])]),r._v(" "),t("li",[r._v("保证网络请求由真实用户发出\n"),t("ul",[t("li",[r._v("用户操作限制")])])])]),r._v(" "),t("h3",{attrs:{id:"同源检测机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同源检测机制","aria-hidden":"true"}},[r._v("#")]),r._v(" 同源检测机制")]),r._v(" "),t("p",[r._v("既然 CSRF 大多来自第三方网站，那么我们就直接禁止外域（或者不受信任的域名）对我们发起请求。")]),r._v(" "),t("p",[r._v("在 HTTP 协议中，每个一部请求都会携带两个 Header，用于标记来源域名：")]),r._v(" "),t("ul",[t("li",[r._v("Origin Header")]),r._v(" "),t("li",[r._v("Referrer Header")])]),r._v(" "),t("p",[r._v("这两个 Header 在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。服务器可以通过解析这两个 Header 中的域名，确定请求的来源域。")]),r._v(" "),t("h4",{attrs:{id:"origin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#origin","aria-hidden":"true"}},[r._v("#")]),r._v(" Origin")]),r._v(" "),t("p",[r._v("使用 Origin Header 确定来源域名。")]),r._v(" "),t("p",[r._v("在部分与 CSRF 有关的请求中，请求的 Header 中会携带 Origin 字段。字段内包含请求的域名，不包含 "),t("code",[r._v("path")]),r._v(" 及 "),t("code",[r._v("query")]),r._v(" 部分。")]),r._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[r._v("Origin:")]),r._v(" http://foo.example\n")])])]),t("p",[r._v("如果 Origin 存在，那么直接使用 Origin 中的字段确认来源域名就可以。")]),r._v(" "),t("p",[r._v("但是 Origin 在以下两种情况下并不存在：")]),r._v(" "),t("ul",[t("li",[r._v("IE11 同源策略：IE11 不会在跨站 CORS 请求上添加 Origin 标头，Referrer 头仍然是唯一的标识。最根本原因是因为 IE11 对同源的定义和其他浏览器不同，有两个主要的区别，可以参考 "),t("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FSecurity%2FSame-origin_policy%23IE_Exceptions",target:"_blank",rel:"noopener noreferrer"}},[r._v("MDN Same-origin_policy#IE_Exceptions"),t("OutboundLink")],1)]),r._v(" "),t("li",[r._v("302 重定向：在 302 重定向之后 Origin 不包含在重定向的请求中，因为 Origin 可能会被认为是其他来源的敏感信息。对于 302 重定向的情况来说都是定向在新的服务器上的 URL，因此浏览器不想将 Origin 泄漏到新的服务器上。")])]),r._v(" "),t("h4",{attrs:{id:"referrer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#referrer","aria-hidden":"true"}},[r._v("#")]),r._v(" Referrer")]),r._v(" "),t("p",[r._v("根据 HTTP 协议，在 HTTP 头中有一个字段叫  Referrer，记录了该 HTTP 请求的来源地址。")]),r._v(" "),t("ul",[t("li",[r._v("对于 Ajax 请求，图片和脚本文件等资源请求，Referrer 为发起请求的页面地址。")]),r._v(" "),t("li",[r._v("对于页面跳转，Referrer 为打开页面历史记录的前一页面地址。")])]),r._v(" "),t("p",[r._v("因此我们使用 Referrer 中链接的 Origin 部分可以得到"),t("strong",[r._v("请求的来源域名")]),r._v("。")]),r._v(" "),t("p",[r._v("这种方法并非万无一失，Referrer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referrer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referrer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不是很安全。在部分情况下，攻击者可以隐藏，甚至修改自己请求的 Referrer。")]),r._v(" "),t("p",[r._v("新版 Referrer Policy 规定了五种 Referrer 策略：No Referrer、No Referrer When Downgrade、Origin Only、Origin When Cross-orgin 和 Unsafe URL。")]),r._v(" "),t("p",[t("strong",[r._v("使用 Referer Policy 的方式")])]),r._v(" "),t("ol",[t("li",[r._v("CSP 响应头，通过 "),t("code",[r._v("referrer")]),r._v(" 指令和五种可选的指令值，来指定 Referrer 策略")])]),r._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[r._v("Content-Security-Policy:")]),r._v(" referrer no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|unsafe-url;\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[t("code",[r._v("<meta>")]),r._v(" 标签也可以指定 Referrer 策略")])]),r._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("<")]),r._v("meta")]),r._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[r._v("name")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')]),r._v("referrer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')])]),r._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[r._v("content")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')]),r._v("no-referrer|no-referrer-when-downgrade|origin|origin-when-crossorigin|unsafe-url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v("\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("code",[r._v("<a>")]),r._v(" 标签的 "),t("code",[r._v("referrer")]),r._v(" 属性")])]),r._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("<")]),r._v("a")]),r._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[r._v("href")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')]),r._v("http://example.com"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')])]),r._v(" "),t("span",{pre:!0,attrs:{class:"token attr-name"}},[r._v("referrer")]),t("span",{pre:!0,attrs:{class:"token attr-value"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')]),r._v("no-referrer|origin|unsafe-url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v('"')])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v("xxx"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("</")]),r._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(">")])]),r._v("\n")])])]),t("p",[r._v("这种方式作用的只是这一个链接。并且，"),t("code",[r._v("<a>")]),r._v(" 标签可用的 Referrer 策略只有三种：不传、只传 host 和都传。另外，这样针对单个链接设置的策略优先级比 CSP 和 "),t("code",[r._v("<meta>")]),r._v(" 要高。")]),r._v(" "),t("p",[r._v("❓ "),t("strong",[r._v("无法确认来源域名情况")])]),r._v(" "),t("p",[r._v("当 Origin 和 Referrer 头文件不存在时该怎么办？")]),r._v(" "),t("p",[r._v("如果 Origin 和 Referrer 都不存在，建议直接进行阻止，特别是如果您没有使用随机 CSRF Token 作为第二次检查。")]),r._v(" "),t("h3",{attrs:{id:"额外验证机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#额外验证机制","aria-hidden":"true"}},[r._v("#")]),r._v(" 额外验证机制")]),r._v(" "),t("p",[r._v("前面讲到 CSRF 的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用 Cookie 中的信息。")]),r._v(" "),t("p",[r._v("而 CSRF 攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确的 Token，来把正常的请求和攻击的请求区分开，以起到防范 CSRF 的攻击。")]),r._v(" "),t("p",[t("strong",[r._v("随机字符串")])]),r._v(" "),t("p",[r._v("为每一个提交增加一个随机串参数，该参数服务端通过页面下发，每次请求的时候补充到提交参数中，服务端通过校验该参数是否一致来判断是否是用户请求。由于 CSRF 攻击中攻击者是无从事先得知该随机字符串的值，所以服务端就可以通过校验该值拒绝请求。")]),r._v(" "),t("p",[t("strong",[r._v("JSON 网络令牌")])]),r._v(" "),t("p",[r._v("实际上除了 session 登陆之外，现在越来越流行 JWT（JSON Web Token） 登录校验。该方式是在前端记录登陆 Token，每次请求的时候通过在 Header 中添加认证头的方式来实现登录校验过程。由于 CSRF 攻击中攻击者无法知道该 Token 值，通过这种方式也可以防止 CSRF 攻击。")]),r._v(" "),t("h3",{attrs:{id:"用户操作限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户操作限制","aria-hidden":"true"}},[r._v("#")]),r._v(" 用户操作限制")]),r._v(" "),t("p",[r._v("CSRF 攻击过程中，用户是在不知情的情况下构造了网络请求，因此添加验证码能强制用户必须与应用进行交互，服务器通过验证码来识别是不是用户主动发送的请求，由于一定强度的验证码机器无法识别，因此危险网站不能伪造一个完整的请求。")]),r._v(" "),t("ul",[t("li",[r._v("优点：简洁有效，低成本")]),r._v(" "),t("li",[r._v("缺点：对用户不友好，无法给所有的操作都加上验证码")])]),r._v(" "),t("hr"),r._v(" "),t("p",[t("strong",[r._v("参考资料")])]),r._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/post/5bc009996fb9a05d0a055192",target:"_blank",rel:"noopener noreferrer"}},[r._v("📝 前端安全系列：如何防止 CSRF 攻击?"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/entry/58802eb58fd9c50067dd746b",target:"_blank",rel:"noopener noreferrer"}},[r._v("📝 CSRF 攻击的应对之道"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/entry/5b1e4575f265da6e2c19fd57",target:"_blank",rel:"noopener noreferrer"}},[r._v("📝 CSRF 漏洞详细说明"),t("OutboundLink")],1)]),r._v(" "),t("li",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("📝 JSON Web Token 入门教程"),t("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{571:function(a,t,s){"use strict";s.r(t);var v=s(2),_=Object(v.a)({},function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"编译阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段","aria-hidden":"true"}},[a._v("#")]),a._v(" 编译阶段")]),a._v(" "),s("h2",{attrs:{id:"编译原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译原理","aria-hidden":"true"}},[a._v("#")]),a._v(" 编译原理")]),a._v(" "),s("p",[a._v("JavaScript 是一门编译语言。与传统的编译语言不同的是，JavaScript 不是提前编译的，编译结果也不能在分布式系统中进行移植。")]),a._v(" "),s("p",[a._v("在传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为 "),s("strong",[a._v("编译")]),a._v("。")]),a._v(" "),s("ul",[s("li",[a._v("分词 / 词法分析")]),a._v(" "),s("li",[a._v("解析 / 语法分析")]),a._v(" "),s("li",[a._v("代码生成")])]),a._v(" "),s("h3",{attrs:{id:"词法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 词法分析")]),a._v(" "),s("p",[s("strong",[a._v("词法分析")]),a._v("（Tokenizing / Lexing）这个过程会将由字符组成的字符串分解成有意义的代码块（对编程语言来说），这些代码块被称为 "),s("strong",[a._v("词法单元")]),a._v("（Token）。")]),a._v(" "),s("p",[a._v("🌰 "),s("strong",[a._v("标准示例：")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("这段程序通常会被分解成为下面这些词法单元："),s("code",[a._v("var")]),a._v("、"),s("code",[a._v("a")]),a._v("、"),s("code",[a._v("=")]),a._v("、"),s("code",[a._v("2")]),a._v("、"),s("code",[a._v(";")]),a._v("。空格是否会被当作词法单元，取决于空格在这门语言中是否具有意义。")]),a._v(" "),s("p",[a._v("分词（Tokenizing）和词法分析（Lexing）之间的主要差异在于词法单元的识别是通过有状态还是无状态的方式进行的。简单来说，如果词法单元生成器在判断 "),s("code",[a._v("a")]),a._v(" 是一个独立的词法单元还是其他词法单元的一部分时，调用的是"),s("strong",[a._v("有状态的解析规则")]),a._v("，那么这个过程就被称为"),s("strong",[a._v("词法分析")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"语法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法分析","aria-hidden":"true"}},[a._v("#")]),a._v(" 语法分析")]),a._v(" "),s("p",[s("strong",[a._v("语法分析")]),a._v("（Parsing） 这个过程是将词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树被称为 "),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9",target:"_blank",rel:"noopener noreferrer"}},[a._v("抽象语法树"),s("OutboundLink")],1),a._v("（Abstract Syntax Tree，AST 在各大框架及 "),s("a",{attrs:{href:"https://github.com/babel/babel",target:"_blank",rel:"noopener noreferrer"}},[a._v("Babel"),s("OutboundLink")],1),a._v(" 中我们都会看到它的身影）。")]),a._v(" "),s("h3",{attrs:{id:"代码生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码生成","aria-hidden":"true"}},[a._v("#")]),a._v(" 代码生成")]),a._v(" "),s("p",[a._v("将 AST 转换为可执行代码的过程被称为"),s("strong",[a._v("代码生成")]),a._v("。这个过程与语言、目标平台等息息相关。 抛开具体细节，简单来说就是有某种方法可以将 "),s("code",[a._v("var a = 2;")]),a._v(" 的 AST 转化为一组机器指令：创建一个叫做 "),s("code",[a._v("a")]),a._v(" 的变量（包括分配内存等），并将一个值存储在 "),s("code",[a._v("a")]),a._v(" 中。")]),a._v(" "),s("p",[a._v("通过上述三个阶段，浏览器已经可以运行我们得到的"),s("strong",[a._v("可执行代码")]),a._v("了，这三个阶段还有一个合称呼叫"),s("strong",[a._v("编译阶段")]),a._v("。我们把之后对可执行代码的执行称为"),s("strong",[a._v("运行阶段")]),a._v("。")]),a._v(" "),s("h2",{attrs:{id:"编译过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译过程","aria-hidden":"true"}},[a._v("#")]),a._v(" 编译过程")]),a._v(" "),s("p",[a._v("编译过程中的关键角色。")]),a._v(" "),s("ul",[s("li",[a._v("引擎：从头到尾负责整个 JavaScript 程序的编译及执行过程")]),a._v(" "),s("li",[a._v("编译器：负责语法分析及代码生成等步骤")]),a._v(" "),s("li",[a._v("作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限")])]),a._v(" "),s("h3",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域","aria-hidden":"true"}},[a._v("#")]),a._v(" 作用域")]),a._v(" "),s("blockquote",[s("p",[a._v("作用域就是变量（标识符）适用范围，控制着变量的可见性。")])]),a._v(" "),s("p",[a._v("《You don‘t know js》对作用域的定义：")]),a._v(" "),s("blockquote",[s("p",[a._v("使用一套严格的规则来分辨哪些标识符对那些语法有访问权限。")])]),a._v(" "),s("p",[a._v("《JavaScript 权威指南》中对变量作用域的描述：")]),a._v(" "),s("blockquote",[s("p",[a._v("一个变量的作用域（Scope）是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在 JavaScript 代码中的任何地方都是有定义的。然而在函数内声明的变量只在函数体内有定义。它们是局部变量，作用域是局部性的。函数参数也是局部变量，它们只是在函数体内有定义。")])]),a._v(" "),s("h3",{attrs:{id:"过程详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过程详解","aria-hidden":"true"}},[a._v("#")]),a._v(" 过程详解")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("通过以上论述可以得知，编译器首先会将这段代码分解成词法单元，然后将词法单元解构成一个树结构（AST），但是当编译器开始进行代码生成时，它对这段代码的处理方式会和预期的情况有所不同。")]),a._v(" "),s("p",[a._v('当我们看到这行代码，用伪代码与别人进行概括时，可能会表述为："为一个变量分配内存，并将其命名为 '),s("code",[a._v("a")]),a._v('，然后将值 2 保存到这个变量（内存）中。"')]),a._v(" "),s("p",[a._v("然而，这并不完全正确。")]),a._v(" "),s("p",[s("strong",[a._v("事实上编译器会进行如下操作：")])]),a._v(" "),s("ol",[s("li",[a._v("执行流遇到 "),s("code",[a._v("var a")]),a._v("，编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为"),s("code",[a._v("a")]),a._v("。")]),a._v(" "),s("li",[a._v("接下来编译器会为引擎生成运行所需的代码，这些代码被用来处理 "),s("code",[a._v("a = 2")]),a._v(" 这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域集合中，是否存在一个叫作 "),s("code",[a._v("a")]),a._v(" 的变量，如果是，引擎就会使用这个变量；如果否，引擎就会继续查找该变量。")])]),a._v(" "),s("p",[a._v("总结起来就是：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("编译器在作用域声明变量（如果没有）")])]),a._v(" "),s("li",[s("p",[a._v("引擎在运行这些代码时查找该变量，如果作用域中有该变量则进行赋值")])])]),a._v(" "),s("p",[a._v("在上面的第二步中，引擎执行运行时所需的代码时，会通过查找变量 "),s("code",[a._v("a")]),a._v(" 来判断它是否已经声明过。查找的过程由作用域进行协助，但是引擎执行怎么查找，会影响最终的查找结果。")]),a._v(" "),s("p",[a._v("还是 "),s("code",[a._v("var a = 2;")]),a._v(" 这个例子，引擎会为变量 "),s("code",[a._v("a")]),a._v(" 进行 LHS 查询。当然还有一种 RHS 查询。")]),a._v(" "),s("p",[a._v("那么 LHS 和 RHS 查询是什么呢？")]),a._v(" "),s("p",[a._v("这里的 L 代表左侧，R 代表右侧。通俗且不严谨的解释 LHS 和 RHS 的含义就是："),s("strong",[a._v("当变量出现在赋值操作的左侧时进行 LHS 查询，出现在右侧时进行 RHS 查询。")])]),a._v(" "),s("p",[a._v("那么描述的更准确的一点，RHS 查询与简单的查找某个变量的值毫无二致，而 LHS 查询则是试图找到变量的容器本身，从而可以对其赋值。")]),a._v(" "),s("p",[a._v('从这个角度说，RHS 并不是真正意义上的"赋值操作的右侧"，更准确的说是"非左侧"。所以，我们可以将 RHS 理解成 Retrieve his source value（取到它的源值），这意味着，"得到某某的值"。')]),a._v(" "),s("p",[a._v("那我们来看一段代码深入理解一下 LHS 与 RHS。")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[a._v("在 "),s("code",[a._v("console.log(a)")]),a._v(" 中，变量 "),s("code",[a._v("a")]),a._v(" 的引用是一个 RHS 引用，因为我们是取到 "),s("code",[a._v("a")]),a._v(" 的值。并将这个值传递给 "),s("code",[a._v("console.log(…)")]),a._v(" 方法")]),a._v(" "),s("li",[a._v("相比之下，例如： "),s("code",[a._v("a = 2")]),a._v(" ，调用 "),s("code",[a._v("foo(2)")]),a._v(" 时，隐式的进行了赋值操作。这里对 "),s("code",[a._v("a")]),a._v(" 的引用就是 LHS 引用，因为我们实际上不关心当前的值时什么，只要想把 "),s("code",[a._v("=2")]),a._v(" 这个赋值操作找到一个目标。")])]),a._v(" "),s("p",[a._v('LHS 和 RHS 的含义是"赋值操作的左侧或右侧"并不一定意味着就是 '),s("code",[a._v("=赋值操作符的左侧或右侧")]),a._v("。")]),a._v(" "),s("p",[a._v("赋值操作还有其他几种形式，因此在概念上最好将其理解 "),s("strong",[a._v("赋值操作的目标是谁")]),a._v("（LHS） 以及 "),s("strong",[a._v("谁是赋值操作的源头")]),a._v("（RHS）。")]),a._v(" "),s("p",[a._v("当然上面的程序并不只有一个 LHS 和 RHS 引用：")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这里隐式的进行了对形参 a 的 LHS 引用。")]),a._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这里对 log() 方法进行了 RHS 引用，询问 console 对象上是否有 log() 方法。")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对 log(a) 方法内的 a 进行 RHS 引用，取到 a 的值。")]),a._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('// 此处调用 foo() 方法，需要调用对 foo 的 RHS 引用。意味着"去找foo这个值，并把它给我"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("需要注意的是：我们经常会将函数声明 "),s("code",[a._v("function foo(a) {...}")]),a._v(" 转化为普通的变量赋值（函数表达式） "),s("code",[a._v("var foo = function(a) {…}")]),a._v('，这样去理解的话，这个函数是 LHS 查询。但是有一个细微的差别，编译器可以在代码生成的同时处理声明和值的定义，比如引擎执行代码时，并不会有线程专门用来将一个函数值"分配给" '),s("code",[a._v("foo")]),a._v("，因此，将函数声明理解成前面讨论的 LHS 查询和赋值的形式并不合适。")]),a._v(" "),s("p",[a._v("💡 综上所述，作用域是一套 "),s("strong",[a._v("标识符的查询规则")]),a._v("（注意这里的用词是规则），JavaScript 编译引擎执行时根据查找的目的进行 LHS 与 RHS 查询。这套查询规则确定标识符在何处（当前作用域、上层作用域或全局作用域）以及如何查找（LHS、RHS）。")])])},[],!1,null,null,null);t.default=_.exports}}]);